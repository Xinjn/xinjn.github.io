"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[15819],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(t),f=o,d=m["".concat(l,".").concat(f)]||m[f]||p[f]||a;return t?r.createElement(d,s(s({ref:n},u),{},{components:t})):r.createElement(d,s({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},96704:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={},s=void 0,i={unversionedId:"\u524d\u7aef\u57fa\u7840/DEMO/\u56fe\u7247\u4e0a\u4f20/H5\u7248",id:"\u524d\u7aef\u57fa\u7840/DEMO/\u56fe\u7247\u4e0a\u4f20/H5\u7248",title:"H5\u7248",description:"\u53c2\u8003\u9879\u76ee\uff1a\u51e4\u5a31\u6307\u6570/\u51e4\u5411\u6807",source:"@site/docs/\u524d\u7aef\u57fa\u7840/DEMO/\u56fe\u7247\u4e0a\u4f20/H5\u7248.md",sourceDirName:"\u524d\u7aef\u57fa\u7840/DEMO/\u56fe\u7247\u4e0a\u4f20",slug:"/\u524d\u7aef\u57fa\u7840/DEMO/\u56fe\u7247\u4e0a\u4f20/H5\u7248",permalink:"/docs/\u524d\u7aef\u57fa\u7840/DEMO/\u56fe\u7247\u4e0a\u4f20/H5\u7248",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u524d\u7aef\u57fa\u7840/DEMO/\u56fe\u7247\u4e0a\u4f20/H5\u7248.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u539f\u751f\u7248",permalink:"/docs/\u524d\u7aef\u57fa\u7840/DEMO/\u5361\u7247\u7ffb\u8f6c/\u539f\u751f\u7248"},next:{title:"\u5c0f\u7a0b\u5e8f\u7248",permalink:"/docs/\u524d\u7aef\u57fa\u7840/DEMO/\u56fe\u7247\u4e0a\u4f20/\u5c0f\u7a0b\u5e8f\u7248"}},l={},c=[],u={toc:c};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u53c2\u8003\u9879\u76ee\uff1a\u51e4\u5a31\u6307\u6570/\u51e4\u5411\u6807"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"API \u63a5\u53e3")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// \u8c03\u8d77\u76f8\u518c\u9009\u62e9\u56fe\u7247API\u751f\u6210blog\u8f6curl\nexport const chooseImage = (options) => {\n  const { count = 1, success, complete, imageId = "taroChooseImage" } = options;\n\n  let taroChooseImageId = document.getElementById(imageId);\n\n  if (!taroChooseImageId) {\n    const obj = document.createElement("input");\n\n    obj.setAttribute("type", "file");\n    obj.setAttribute("id", imageId);\n    if (count > 1) {\n      obj.setAttribute("multiple", "multiple");\n    }\n    obj.setAttribute("accept", "image/*");\n    obj.setAttribute(\n      "style",\n      "position: fixed; top: -4000px; left: -3000px; z-index: -300;"\n    );\n    document.body.appendChild(obj);\n    taroChooseImageId = document.getElementById(imageId);\n  } else if (count > 1) {\n    taroChooseImageId.setAttribute("multiple", "multiple");\n  } else {\n    taroChooseImageId.removeAttribute("multiple");\n  }\n\n  let taroChooseImageCallback = null;\n\n  const taroChooseImagePromise = new Promise((resolve) => {\n    taroChooseImageCallback = resolve;\n  });\n  const TaroMouseEvents = document.createEvent("MouseEvents");\n\n  TaroMouseEvents.initEvent("click", true, true);\n  taroChooseImageId.dispatchEvent(TaroMouseEvents);\n  taroChooseImageId.onchange = (e) => {\n    const arr = [...e.target.files];\n    let num = 0;\n\n    arr &&\n      arr.forEach(async (item) => {\n        const res = {\n          errMsg: "chooseImage:ok",\n          tempFilePaths: [],\n          tempFiles: [],\n        };\n        console.log("item", item);\n\n        const blob = new Blob([item], {\n          type: item.type,\n        });\n\n        const fileReaderBuffer = new FileReader();\n        const fileReader = new FileReader();\n\n        // \u8bfb\u53d6\u662f\u5426\u662fheic\u683c\u5f0f\u56fe\u7247\n        fileReaderBuffer.onload = async () => {\n          const type = getFileType(fileReaderBuffer);\n\n          if (type.includes("/heic")) {\n            Alert.default({\n              content: "\u56fe\u7247\u683c\u5f0f\u9700\u8f6c\u6362\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85",\n              delay: 1500,\n            });\n            heic2any({ blob: item, toType: "image/jpeg" })\n              .then((res) => {\n                fileReader.readAsDataURL(res);\n              })\n              .catch(() => {\n                Alert.default({\n                  content: "\u6682\u4e0d\u652f\u6301\u8be5\u56fe\u7247\u683c\u5f0f\uff0c\u8bf7\u4e0a\u4f20\u5176\u4ed6\u56fe\u7247",\n                });\n                e.target.value = "";\n              });\n\n            return;\n          } else {\n            const url = URL.createObjectURL(blob);\n\n            num++;\n            res.tempFilePaths.push(url);\n            res.tempFiles.push({\n              path: url,\n              size: item.size,\n              type: item.type,\n              originalFileObj: item,\n            });\n            typeof success === "function" && success(res, num);\n            typeof complete === "function" && complete(res, num);\n            taroChooseImageCallback(res);\n            e.target.value = "";\n          }\n        };\n\n        fileReaderBuffer.onerror = () => {\n          taroChooseImageCallback(res);\n          e.target.value = "";\n        };\n\n        fileReader.onload = (e1) => {\n          console.log(2);\n          compress(e1.target?.result, 0.5, async (url) => {\n            const originalFileObj = await dataURLtoFile(url);\n\n            num++;\n            res.tempFilePaths.push(url);\n            res.tempFiles.push({\n              path: url,\n              size: item.size,\n              type: item.type,\n              originalFileObj,\n            });\n            typeof success === "function" && success(res, num);\n            typeof complete === "function" && complete(res, num);\n            taroChooseImageCallback(res);\n            e.target.value = "";\n          });\n        };\n\n        fileReader.onerror = () => {\n          taroChooseImageCallback(res);\n          e.target.value = "";\n        };\n\n        fileReaderBuffer.readAsArrayBuffer(item);\n      });\n  };\n\n  return taroChooseImagePromise;\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"chooseImage({\n  count: 1,\n  success: (res) => {\n    const files = res?.tempFiles\n      ?.splice(0, 1)\n      ?.map((item) => ({ ...item, uuid: uuidv4() }));\n\n    const cos = new Core(newCors());\n\n    files.forEach(async (item) => {\n      const { originalFileObj: file, uuid } = item;\n\n      if (file && file.size) {\n        const key = await getMediaKey(file, listId);\n\n        cos.uploadFile({\n          file,\n          key,\n          options: {\n            needAutoOrient: true,\n          },\n          success(res) {\n            setUploadImg(res?.sourcePath);\n            setTimeout(() => {\n              setImgEditor(true);\n            }, 300);\n          },\n        });\n      }\n    });\n  },\n});\n")))}p.isMDXComponent=!0}}]);
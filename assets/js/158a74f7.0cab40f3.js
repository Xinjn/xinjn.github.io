"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[14462],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=l(t),u=a,m=g["".concat(d,".").concat(u)]||g[u]||c[u]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},52657:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const o={},i=void 0,s={unversionedId:"\u4f9d\u8d56\u5305/\u62d6\u62fd/react-beautiful-dnd/QuickStart",id:"\u4f9d\u8d56\u5305/\u62d6\u62fd/react-beautiful-dnd/QuickStart",title:"QuickStart",description:"Hooks",source:"@site/docs/\u4f9d\u8d56\u5305/\u62d6\u62fd/react-beautiful-dnd/QuickStart.md",sourceDirName:"\u4f9d\u8d56\u5305/\u62d6\u62fd/react-beautiful-dnd",slug:"/\u4f9d\u8d56\u5305/\u62d6\u62fd/react-beautiful-dnd/QuickStart",permalink:"/docs/\u4f9d\u8d56\u5305/\u62d6\u62fd/react-beautiful-dnd/QuickStart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u4f9d\u8d56\u5305/\u62d6\u62fd/react-beautiful-dnd/QuickStart.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"[react-beautiful-dnd](https://github.com/atlassian/react-beautiful-dnd)",permalink:"/docs/\u4f9d\u8d56\u5305/\u62d6\u62fd/react-beautiful-dnd/"},next:{title:"FAQ",permalink:"/docs/\u4f9d\u8d56\u5305/\u62d6\u62fd/react-dnd/FAQ"}},d={},l=[{value:"Hooks",id:"hooks",level:2},{value:"Class",id:"class",level:2}],p={toc:l};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"hooks"},"Hooks"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import React, { useState, useCallback } from "react";\nimport styles from "./index.less";\n// react-beautiful-dnd\nimport { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";\n\n// \u5047\u6570\u636e\u751f\u6210\u5668\nconst getItems = (count) =>\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\n    id: `item-${k}`,\n    content: `item ${k}`,\n  }));\n\n// \u91cd\u65b0\u6392\u5e8f\u7ed3\u679c\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: "none",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? "lightgreen" : "grey",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? "lightblue" : "lightgrey",\n  padding: grid,\n  width: 250,\n});\n\nconst Index = () => {\n  const [items, setItems] = useState(getItems(10));\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    let items2 = reorder(items, result.source.index, result.destination.index);\n\n    setItems(items2);\n  };\n\n  return (\n    <div>\n      <div className={styles.title}>\u62d6\u62fd\u7ec4\u4ef6</div>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId="droppable">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default Index;\n')),(0,a.kt)("h2",{id:"class"},"Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import React, { Component } from "react";\nimport ReactDOM from "react-dom";\nimport { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";\n\n// fake data generator\nconst getItems = (count) =>\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\n    id: `item-${k}`,\n    content: `item ${k}`,\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: "none",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? "lightgreen" : "grey",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? "lightblue" : "lightgrey",\n  padding: grid,\n  width: 250,\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(10),\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items,\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId="droppable">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\n// Put the thing into the DOM!\nReactDOM.render(<App />, document.getElementById("root"));\n')))}c.isMDXComponent=!0}}]);